// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Item interface {
	IsItem()
}

type CreateDishInput struct {
	Name     string         `json:"name"`
	Category DishCategories `json:"category"`
	Price    float64        `json:"price"`
}

type CreateDrinkInput struct {
	Name     string          `json:"name"`
	Category DrinkCategories `json:"category"`
	Price    float64         `json:"price"`
}

type Dish struct {
	ID       string         `json:"id"`
	Name     string         `json:"name"`
	Category DishCategories `json:"category"`
	Price    float64        `json:"price"`
}

func (Dish) IsItem() {}

type Drink struct {
	ID       string          `json:"id"`
	Name     string          `json:"name"`
	Category DrinkCategories `json:"category"`
	Price    float64         `json:"price"`
}

func (Drink) IsItem() {}

type UpdateInput struct {
	ID    string  `json:"id"`
	Price float64 `json:"price"`
}

type DishCategories string

const (
	DishCategoriesAppetizersAndSalads DishCategories = "APPETIZERS_AND_SALADS"
	DishCategoriesDessert             DishCategories = "DESSERT"
	DishCategoriesSoups               DishCategories = "SOUPS"
	DishCategoriesChildrenMenu        DishCategories = "CHILDREN_MENU"
	DishCategoriesSauces              DishCategories = "SAUCES"
	DishCategoriesMainDishes          DishCategories = "MAIN_DISHES"
	DishCategoriesSteakhouse          DishCategories = "STEAKHOUSE"
	DishCategoriesSideDishes          DishCategories = "SIDE_DISHES"
	DishCategoriesSeasonMenu          DishCategories = "SEASON_MENU"
	DishCategoriesPizza               DishCategories = "PIZZA"
)

var AllDishCategories = []DishCategories{
	DishCategoriesAppetizersAndSalads,
	DishCategoriesDessert,
	DishCategoriesSoups,
	DishCategoriesChildrenMenu,
	DishCategoriesSauces,
	DishCategoriesMainDishes,
	DishCategoriesSteakhouse,
	DishCategoriesSideDishes,
	DishCategoriesSeasonMenu,
	DishCategoriesPizza,
}

func (e DishCategories) IsValid() bool {
	switch e {
	case DishCategoriesAppetizersAndSalads, DishCategoriesDessert, DishCategoriesSoups, DishCategoriesChildrenMenu, DishCategoriesSauces, DishCategoriesMainDishes, DishCategoriesSteakhouse, DishCategoriesSideDishes, DishCategoriesSeasonMenu, DishCategoriesPizza:
		return true
	}
	return false
}

func (e DishCategories) String() string {
	return string(e)
}

func (e *DishCategories) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DishCategories(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DishCategories", str)
	}
	return nil
}

func (e DishCategories) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DrinkCategories string

const (
	DrinkCategoriesSoftDrinks       DrinkCategories = "SOFT_DRINKS"
	DrinkCategoriesCoffeeAndTea     DrinkCategories = "COFFEE_AND_TEA"
	DrinkCategoriesDraftCiderOrBeer DrinkCategories = "DRAFT_CIDER_OR_BEER"
	DrinkCategoriesCider            DrinkCategories = "CIDER"
	DrinkCategoriesBeer             DrinkCategories = "BEER"
	DrinkCategoriesAperitives       DrinkCategories = "APERITIVES"
	DrinkCategoriesVodka            DrinkCategories = "VODKA"
	DrinkCategoriesRedWine          DrinkCategories = "RED_WINE"
	DrinkCategoriesWhiteWine        DrinkCategories = "WHITE_WINE"
	DrinkCategoriesRoseWine         DrinkCategories = "ROSE_WINE"
	DrinkCategoriesSparklingWine    DrinkCategories = "SPARKLING_WINE"
	DrinkCategoriesGin              DrinkCategories = "GIN"
	DrinkCategoriesTequila          DrinkCategories = "TEQUILA"
	DrinkCategoriesRum              DrinkCategories = "RUM"
	DrinkCategoriesCognacAndBrandy  DrinkCategories = "COGNAC_AND_BRANDY"
	DrinkCategoriesLiquor           DrinkCategories = "LIQUOR"
	DrinkCategoriesWhiskey          DrinkCategories = "WHISKEY"
)

var AllDrinkCategories = []DrinkCategories{
	DrinkCategoriesSoftDrinks,
	DrinkCategoriesCoffeeAndTea,
	DrinkCategoriesDraftCiderOrBeer,
	DrinkCategoriesCider,
	DrinkCategoriesBeer,
	DrinkCategoriesAperitives,
	DrinkCategoriesVodka,
	DrinkCategoriesRedWine,
	DrinkCategoriesWhiteWine,
	DrinkCategoriesRoseWine,
	DrinkCategoriesSparklingWine,
	DrinkCategoriesGin,
	DrinkCategoriesTequila,
	DrinkCategoriesRum,
	DrinkCategoriesCognacAndBrandy,
	DrinkCategoriesLiquor,
	DrinkCategoriesWhiskey,
}

func (e DrinkCategories) IsValid() bool {
	switch e {
	case DrinkCategoriesSoftDrinks, DrinkCategoriesCoffeeAndTea, DrinkCategoriesDraftCiderOrBeer, DrinkCategoriesCider, DrinkCategoriesBeer, DrinkCategoriesAperitives, DrinkCategoriesVodka, DrinkCategoriesRedWine, DrinkCategoriesWhiteWine, DrinkCategoriesRoseWine, DrinkCategoriesSparklingWine, DrinkCategoriesGin, DrinkCategoriesTequila, DrinkCategoriesRum, DrinkCategoriesCognacAndBrandy, DrinkCategoriesLiquor, DrinkCategoriesWhiskey:
		return true
	}
	return false
}

func (e DrinkCategories) String() string {
	return string(e)
}

func (e *DrinkCategories) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DrinkCategories(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DrinkCategories", str)
	}
	return nil
}

func (e DrinkCategories) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
