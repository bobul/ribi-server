package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"

	"github.com/bobul/ribi-server/graph/model"
)

// CreateDish is the resolver for the createDish field.
func (r *mutationResolver) CreateDish(ctx context.Context, input model.CreateDishInput) (*model.Dish, error) {
	panic(fmt.Errorf("not implemented: CreateDish - createDish"))
}

// CreateDrink is the resolver for the createDrink field.
func (r *mutationResolver) CreateDrink(ctx context.Context, input model.CreateDrinkInput) (*model.Drink, error) {
	panic(fmt.Errorf("not implemented: CreateDrink - createDrink"))
}

// UpdateDish is the resolver for the updateDish field.
func (r *mutationResolver) UpdateDish(ctx context.Context, input model.UpdateInput) (*model.Dish, error) {
	panic(fmt.Errorf("not implemented: UpdateDish - updateDish"))
}

// UpdateDrink is the resolver for the updateDrink field.
func (r *mutationResolver) UpdateDrink(ctx context.Context, input model.UpdateInput) (*model.Drink, error) {
	panic(fmt.Errorf("not implemented: UpdateDrink - updateDrink"))
}

// DeleteDish is the resolver for the deleteDish field.
func (r *mutationResolver) DeleteDish(ctx context.Context, id string) (*model.Dish, error) {
	panic(fmt.Errorf("not implemented: DeleteDish - deleteDish"))
}

// DeleteDrink is the resolver for the deleteDrink field.
func (r *mutationResolver) DeleteDrink(ctx context.Context, id string) (*model.Drink, error) {
	panic(fmt.Errorf("not implemented: DeleteDrink - deleteDrink"))
}

// Item is the resolver for the item field.
func (r *queryResolver) Item(ctx context.Context, id string) (model.Item, error) {
	panic(fmt.Errorf("not implemented: Item - item"))
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context) ([]model.Item, error) {
	panic(fmt.Errorf("not implemented: Items - items"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
